<?xml version='1.0' encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        ">


    <!--添加注解-->
        <context:annotation-config/>
        <context:component-scan base-package="com.jy"/>

    <!--加载druid.properties属性文件-->
        <context:property-placeholder location="classpath:druid.properties"/>


    <!--依赖spring容器完成数据源DataSource创建-->
        <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
            <property name="driverClassName" value="${druid.driver}"/>
            <property name="url" value="${druid.url}"/>
            <property name="username" value="${druid.username}"/>
            <property name="password" value="${druid.password}"/>

            <property name="initialSize" value="${druid.pool.init}"/>
            <property name="minIdle" value="${druid.pool.minIdle}"/>
            <property name="maxActive" value="${druid.pool.maxIdle}"/>
            <property name="maxWait" value="${druid.pool.timeout}"/>
        </bean>

    <!--依赖spring容器完成mybatis的sqlSessionFactory对象的创建-->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <!--配置数据源-->
            <property name="dataSource" ref="druidDataSource"/>
            <!--配置mapper文件的路径-->
            <property name="mapperLocations" value="classpath:mappers/*Mapper.xml"/>
            <!--所有pojo类自动取别名-->
            <property name="typeAliasesPackage" value="com.jy.pojo"/>
            <!--可选：配置mybatis的主配置文件 如开启二级缓存-->
            <property name="configLocation" value="classpath:mybatis-config.xml"/>
        </bean>

    <!--加载dao中的所有dao接口，通过sqlSessionFactory获取sqlSession，然后创建所有的DAO接口对象，存储在spring容器-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
            <property name="basePackage" value="com.jy.dao"/>
        </bean>

    <!--1.将spring提供的事务管理器配置给spring容器-->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="druidDataSource"></property>
        </bean>

    <!--2.通过spring jdbc提供的tx标签，声明事务管理策略
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                !-
                isolation:设置事务隔离级别：READ_UNCOMMITTED READ_COMMITTED REPEATABLE_READ SERIALIZABLE
                propagation:事务的传播机制：
                            REQUIRED 如果上层方法没有事务，则创建一个新的事务，如已经存在事务，则加入到事务中。
                            SUPPORTS 如果上层方法没有事务，则以非事务方式执行，如已存在事务，则加入到事务中
                            REQUIRED_NEW 如果上层方法没有事务，则创建一个新的事务，如已经存在事务，则将当前事务挂起，在创建新事务。
                            NOT_SUPPORTED 如果上层方法没有事务，则以非事务方式执行，如已存在事务，则将当前事务挂起
                            NEVER 如果上层方法没有事务，则以非事务方式执行，如已存在事务，则抛出异常
                            MANDATORY 如已经存在事务，则加入到事务中，如不存在事务，则抛出异常
                            NESTED 如果上层方法没有事务，则创建一个新的事务，如已经存在事务，则嵌套（内层事务执行完，再执行外层事务）到当前事务中。
                -
                <tx:method name="insert*" isolation="REPEATABLE_READ" propagation="REQUIRED"/>
                <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED"/>
                <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED"/>
                <tx:method name="query*" isolation="REPEATABLE_READ" propagation="SUPPORTS"/>
            </tx:attributes>
        </tx:advice>
    -->

    <!--3.将事务管理策略以AOP配置 应用于DAO操作方法
        <aop:config>
            <aop:pointcut id="curd" expression="execution(* com.jy.service.*.*(..))"></aop:pointcut>

            <aop:advisor advice-ref="txAdvice" pointcut-ref="curd"/>
        </aop:config>
    -->

    <!--2.声明使用注解完成事务配置-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>